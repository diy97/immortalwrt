name: Build Immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

permissions:
  actions: write
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}-${{ matrix.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [24.10.0]
        target: [lunzn_fastrhino-r68s]
        include:
          - target: lunzn_fastrhino-r68s
            vendor: rockchip
            arch: armv8
            env_file: r68s.env
            conf_dir: rockchip

    steps:
      - name: Checkout source tree
        uses: actions/checkout@v3

      - name: Install deps
        run: |
          sudo apt update
          sudo apt full-upgrade
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
               bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
               g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
               libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
               libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \
               nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
               python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
               texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

      - name: Load env file
        run: |
          cat ${{ matrix.conf_dir }}/${{ matrix.env_file }} >> $GITHUB_ENV

      - name: Build images
        run: |
          echo ${{ env.PROFILE }}
          echo ${{ env.PACKAGES }}
          echo ${{ env.FILES }}
          sf=""
          pf=${{ matrix.vendor }}-${{ matrix.arch }}
          vendor=${{ matrix.vendor }}
          arch=${{ matrix.arch }}
          IB=$(curl -s https://api.github.com/repos/diy97/immortalwrt/releases/latest | grep browser_download_url | cut -d : -f 2,3 | tr -d \" | grep -E 'openwrt-imagebuilder-' | head -1)
          wget -q $IB -O ib.tar.zst
          mkdir ib
          tar -I zstd -xf ib.tar.zst --strip-components=1 -C ib
          cp -a ${{matrix.conf_dir}}/files ib/
          cd ib
          wget -q https://downloads.immortalwrt.org/releases/24.10.0/targets/rockchip/armv8/immortalwrt-imagebuilder-24.10.0-rockchip-armv8.Linux-x86_64.tar.zst
          zstdcat immortalwrt-imagebuilder-24.10.0-rockchip-armv8.Linux-x86_64.tar.zst | tar xOf - immortalwrt-imagebuilder-24.10.0-rockchip-armv8.Linux-x86_64/repositories | grep -v 'kmods/' > repositories
          cat repositories
          #cd packages && curl -s https://api.github.com/repos/diy97/immortalwrt/releases/latest | grep browser_download_url | cut -d : -f 2,3 | tr -d \" | grep -E "\-20" | xargs wget -qi - && cd -
          make image PROFILE=${{ env.PROFILE }} PACKAGES=${{ env.PACKAGES }} FILES=${{ env.FILES }} V=sc
          cd -
          tree ib/bin

      - name: Publishing to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.version }}
          path: |
            ib/bin/targets/*/*/*

      - name: Read release.md and use it as a body of new release
        id: read_release
        shell: bash
        run: |
          r=$(cat README.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT

      - name: Publishing to GitHub Releases
        uses: svenstaro/upload-release-action@v2
        if: always()
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ib/bin/targets/*/*/*
          tag: latest
          file_glob: true
          overwrite: true
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}
